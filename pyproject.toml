[tool.commitizen]
version = "1.17.1"
tag_format = "v$version"
version_files = [
  "pyproject.toml:version",
  "commitizen/__version__.py"
]

[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
  | profiling
)/
'''

[tool.poetry]
name = "commitizen"
version = "1.17.1"
description = "Python commitizen client tool"
authors = ["Santiago Fraire <santiwilly@gmail.com>"]
license = "MIT"
keywords = ["commitizen", "conventional", "commits", "git"]
readme = "docs/README.md"
homepage = "https://github.com/commitizen-tools/commitizen"
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: Implementation :: CPython",
]

[tool.poetry.dependencies]
python = "^3.6"
questionary = "^1.4.0"
decli = "^0.5.0"
colorama = "^0.4.1"
termcolor = "^1.1"
packaging = ">=19,<21"
tomlkit = "^0.5.3"
jinja2 = "^2.10.3"

[tool.poetry.dev-dependencies]
ipython = "^7.2"
black = "^19.3b0"
pytest = "^5.0"
flake8 = "^3.6"
pytest-cov = "^2.6"
pytest-mock = "^2.0"
codecov = "^2.0"
mypy = "^0.770"
mkdocs = "^1.0"
mkdocs-material = "^4.1"
isort = "^4.3.21"

[tool.poetry.scripts]
cz = "commitizen.cli:main"
git-cz = "commitizen.cli:main"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
combine_as_imports = true
line_length = 88

[tool.coverage]
    [tool.coverage.report]
    show_missing = true
    exclude_lines = [
        # Have to re-enable the standard pragma
        'pragma: no cover',

        # Don't complain about missing debug-only code:
        'def __repr__',
        'if self\.debug',

        # Don't complain if tests don't hit defensive assertion code:
        'raise AssertionError',
        'raise NotImplementedError',

        # Don't complain if non-runnable code isn't run:
        'if 0:',
        'if __name__ == .__main__.:'
    ]
    omit = [
        'env/*',
        'venv/*',
        '*/virtualenv/*',
        '*/virtualenvs/*',
        '*/tests/*'
    ]

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

